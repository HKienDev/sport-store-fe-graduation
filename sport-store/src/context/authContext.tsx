"use client";

import { createContext, useContext, useEffect, useState, useCallback, useRef } from "react";
import { useRouter } from "next/navigation";
import type { NextRouter } from 'next/router';
import { toast } from 'react-hot-toast';
import { SUCCESS_MESSAGES, ROUTES, AUTH_CONFIG } from '@/config/constants';
import { TOKEN_CONFIG } from '@/config/token';
import type { AuthUser } from '@/types/auth';
import type {
    LoginRequest,
    RegisterRequest,
    ResetPasswordRequest,
    VerifyOTPRequest,
    UpdateProfileRequest
} from '@/types/auth';
import {
    login as loginService,
    register as registerService,
    logout as logoutService,
    verifyOTP as verifyOTPService,
    resendOTP as resendOTPService,
    forgotPassword as forgotPasswordService,
    resetPassword as resetPasswordService,
    updateProfile as updateProfileService,
    checkAuth,
    requestUpdate as requestUpdateService,
    updateUser as updateUserService,
    loginWithGoogle as loginWithGoogleService
} from '@/services/authService';
import { handleRedirect } from '@/utils/navigationUtils';

interface AuthContextType {
    user: AuthUser | null;
    loading: boolean;
    isAuthenticated: boolean;
    login: (data: LoginRequest) => Promise<void>;
    register: (data: RegisterRequest) => Promise<void>;
    logout: () => Promise<void>;
    verifyOTP: (data: VerifyOTPRequest) => Promise<void>;
    resendOTP: (data: { email: string }) => Promise<{ success: boolean }>;
    forgotPassword: (email: string) => Promise<void>;
    resetPassword: (data: ResetPasswordRequest) => Promise<void>;
    updateProfile: (data: UpdateProfileRequest) => Promise<void>;
    verifyAccount: (data: VerifyOTPRequest) => Promise<void>;
    requestUpdate: () => Promise<void>;
    updateUser: (data: UpdateProfileRequest) => Promise<void>;
    loginWithGoogle: (token: string) => Promise<{ success: boolean }>;
    setUser: (user: AuthUser | null) => void;
    checkAuthStatus: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
    const router = useRouter() as unknown as NextRouter;
    const [user, setUser] = useState<AuthUser | null>(null);
    const [loading, setLoading] = useState(true);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const isAuthenticatingRef = useRef(false);
    const lastCheckRef = useRef<number>(0);
    const checkAuthPromiseRef = useRef<Promise<void> | null>(null);

    const checkAuthStatus = useCallback(async () => {
        try {
            // N·∫øu ƒëang c√≥ request check auth ƒëang ch·∫°y, ƒë·ª£i n√≥ ho√†n th√†nh
            if (checkAuthPromiseRef.current) {
                console.log('‚è≥ ƒêang c√≥ request check auth ƒëang ch·∫°y, ƒë·ª£i k·∫øt qu·∫£');
                await checkAuthPromiseRef.current;
                return;
            }

            // Ki·ªÉm tra cooldown
            const now = Date.now();
            if (now - lastCheckRef.current < AUTH_CONFIG.CHECK_INTERVAL) {
                console.log('‚è≥ ƒêang trong th·ªùi gian cooldown, b·ªè qua check auth');
                return;
            }

            // Ki·ªÉm tra xem c√≥ token trong localStorage kh√¥ng
            const token = localStorage.getItem(TOKEN_CONFIG.ACCESS_TOKEN.STORAGE_KEY);
            if (!token) {
                console.log('üîí Kh√¥ng t√¨m th·∫•y token, b·ªè qua check auth');
                setUser(null);
                setIsAuthenticated(false);
                setLoading(false);
                return;
            }

            // T·∫°o promise m·ªõi v√† l∆∞u v√†o ref
            checkAuthPromiseRef.current = (async () => {
                try {
                    const response = await checkAuth();
                    if (response.success && response.user) {
                        // L∆∞u user v√†o localStorage
                        localStorage.setItem(TOKEN_CONFIG.USER.STORAGE_KEY, JSON.stringify(response.user));
                        setUser(response.user);
                        setIsAuthenticated(true);
                    } else {
                        // X√≥a user kh·ªèi localStorage n·∫øu kh√¥ng c√≥ user
                        localStorage.removeItem(TOKEN_CONFIG.USER.STORAGE_KEY);
                        setUser(null);
                        setIsAuthenticated(false);
                    }
                } catch (error) {
                    console.error('‚ùå L·ªói khi check auth:', error);
                    // X√≥a user kh·ªèi localStorage khi c√≥ l·ªói
                    localStorage.removeItem(TOKEN_CONFIG.USER.STORAGE_KEY);
                    setUser(null);
                    setIsAuthenticated(false);
                    
                    // N·∫øu ƒëang ·ªü trang auth v√† kh√¥ng ph·∫£i l·ªói cooldown, kh√¥ng c·∫ßn x·ª≠ l√Ω g√¨ th√™m
                    if (window.location.pathname.startsWith('/auth/') && error instanceof Error && error.message !== 'Auth check cooldown') {
                        return;
                    }
                    
                    // N·∫øu kh√¥ng ph·∫£i trang auth, chuy·ªÉn h∆∞·ªõng v·ªÅ trang login
                    if (!window.location.pathname.startsWith('/auth/')) {
                        const currentPath = window.location.pathname;
                        router.push(`/auth/login?from=${encodeURIComponent(currentPath)}`);
                    }
                } finally {
                    lastCheckRef.current = Date.now();
                    setLoading(false);
                    checkAuthPromiseRef.current = null;
                }
            })();

            // ƒê·ª£i promise ho√†n th√†nh
            await checkAuthPromiseRef.current;
        } catch (error) {
            console.error('‚ùå L·ªói khi check auth:', error);
            setLoading(false);
        }
    }, [router]);

    useEffect(() => {
        // Ch·ªâ check auth khi component mount
        checkAuthStatus();

        // Ch·ªâ set interval n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p
        let intervalId: NodeJS.Timeout | null = null;
        if (isAuthenticated) {
            intervalId = setInterval(() => {
                const now = Date.now();
                if (now - lastCheckRef.current >= AUTH_CONFIG.CHECK_INTERVAL) {
                    checkAuthStatus();
                }
            }, AUTH_CONFIG.CHECK_INTERVAL);
        }

        return () => {
            if (intervalId) {
                clearInterval(intervalId);
            }
        };
    }, [isAuthenticated, checkAuthStatus]);

    const login = async (data: LoginRequest) => {
        try {
            setLoading(true);
            isAuthenticatingRef.current = true;
            const response = await loginService(data.email, data.password);
            console.log('Login response:', response);
            
            if (response.success && response.data?.user) {
                const { user: userData, accessToken, refreshToken } = response.data;
                
                // L∆∞u token v√†o cookie
                document.cookie = `accessToken=${accessToken}; path=/; secure; samesite=strict`;
                document.cookie = `refreshToken=${refreshToken}; path=/; secure; samesite=strict`;
                
                // L∆∞u th√¥ng tin user v√† token
                await Promise.all([
                    new Promise(resolve => {
                        localStorage.setItem(TOKEN_CONFIG.USER.STORAGE_KEY, JSON.stringify(userData));
                        localStorage.setItem(TOKEN_CONFIG.ACCESS_TOKEN.STORAGE_KEY, accessToken);
                        localStorage.setItem(TOKEN_CONFIG.REFRESH_TOKEN.STORAGE_KEY, refreshToken);
                        resolve(null);
                    }),
                    new Promise(resolve => {
                        setUser(userData);
                        setIsAuthenticated(true);
                        resolve(null);
                    })
                ]);

                toast.success(SUCCESS_MESSAGES.LOGIN_SUCCESS);
                
                // X·ª≠ l√Ω chuy·ªÉn h∆∞·ªõng
                const urlParams = new URLSearchParams(window.location.search);
                const from = urlParams.get('from');
                const redirectPath = from ? decodeURIComponent(from) : (userData.role === 'admin' ? ROUTES.ADMIN.DASHBOARD : ROUTES.HOME);
                console.log('üîÑ Redirecting after login to:', redirectPath);

                // S·ª≠ d·ª•ng window.location.href cho admin ƒë·ªÉ reload ho√†n to√†n
                if (userData.role === 'admin' && redirectPath.includes('/admin')) {
                    window.location.href = redirectPath;
                } else {
                    router.push(redirectPath);
                }
            } else {
                setUser(null);
                setIsAuthenticated(false);
                throw new Error(response.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:', error);
            setUser(null);
            setIsAuthenticated(false);
            throw error;
        } finally {
            setLoading(false);
            isAuthenticatingRef.current = false;
        }
    };

    const register = async (data: RegisterRequest) => {
        try {
            const response = await registerService(data);
            if (response.success) {
                toast.success(SUCCESS_MESSAGES.REGISTER_SUCCESS);
                await handleRedirect(router, null, window.location.pathname);
            }
        } catch (error) {
            console.error('Registration failed:', error);
            throw error;
        }
    };

    const logout = async () => {
        try {
            await logoutService();
            setUser(null);
            setIsAuthenticated(false);
            setLoading(false);
            toast.success(SUCCESS_MESSAGES.LOGOUT_SUCCESS);
            await handleRedirect(router, null, window.location.pathname);
        } catch (error) {
            console.error('Logout failed:', error);
            throw error;
        }
    };

    const verifyOTP = async (data: VerifyOTPRequest) => {
        try {
            await verifyOTPService(data);
            toast.success(SUCCESS_MESSAGES.ACCOUNT_VERIFIED);
            await handleRedirect(router, null, window.location.pathname);
        } catch (error) {
            console.error('OTP verification failed:', error);
            throw error;
        }
    };

    const resendOTP = async (data: { email: string }) => {
        try {
            setLoading(true);
            const response = await resendOTPService(data.email);
            console.log('Resend OTP response:', response);
            
            if (response.success) {
                setLoading(false);
                toast.success(SUCCESS_MESSAGES.ACCOUNT_VERIFIED);
                return { success: true };
            } else {
                setLoading(false);
                throw new Error(response.message || 'G·ª≠i l·∫°i m√£ OTP th·∫•t b·∫°i');
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi g·ª≠i l·∫°i m√£ OTP:', error);
            setLoading(false);
            throw error;
        }
    };

    const forgotPassword = async (email: string) => {
        try {
            await forgotPasswordService(email);
            toast.success(SUCCESS_MESSAGES.REGISTER_SUCCESS);
            await handleRedirect(router, null, window.location.pathname);
        } catch (error) {
            console.error('Forgot password failed:', error);
            throw error;
        }
    };

    const resetPassword = async (data: ResetPasswordRequest) => {
        try {
            await resetPasswordService(data.token, data.newPassword);
            toast.success(SUCCESS_MESSAGES.REGISTER_SUCCESS);
            await handleRedirect(router, null, window.location.pathname);
        } catch (error) {
            console.error('Reset password failed:', error);
            throw error;
        }
    };

    const updateProfile = async (data: UpdateProfileRequest) => {
        try {
            await updateProfileService(data);
            toast.success(SUCCESS_MESSAGES.UPDATE_PROFILE_SUCCESS);
            await handleRedirect(router, user, window.location.pathname);
        } catch (error) {
            console.error('Update profile failed:', error);
            throw error;
        }
    };

    const verifyAccount = async (data: VerifyOTPRequest) => {
        try {
            await verifyOTPService(data);
            toast.success(SUCCESS_MESSAGES.ACCOUNT_VERIFIED);
            await handleRedirect(router, null, window.location.pathname);
        } catch (error) {
            console.error('Account verification failed:', error);
            throw error;
        }
    };

    const requestUpdate = async () => {
        try {
            await requestUpdateService();
            toast.success(SUCCESS_MESSAGES.REGISTER_SUCCESS);
            await handleRedirect(router, user, window.location.pathname);
        } catch (error) {
            console.error('Request update failed:', error);
            throw error;
        }
    };

    const updateUser = async (data: UpdateProfileRequest) => {
        try {
            await updateUserService(data);
            toast.success(SUCCESS_MESSAGES.UPDATE_PROFILE_SUCCESS);
            await handleRedirect(router, user, window.location.pathname);
        } catch (error) {
            console.error('Update user failed:', error);
            throw error;
        }
    };

    const loginWithGoogle = async (token: string) => {
        try {
            setLoading(true);
            const response = await loginWithGoogleService(token);
            console.log('Google login response:', response);
            
            if (response.success && response.data?.user) {
                const userData = response.data.user;
                setUser(userData);
                setIsAuthenticated(true);
                setLoading(false);
                toast.success(SUCCESS_MESSAGES.LOGIN_SUCCESS);
                const urlParams = new URLSearchParams(window.location.search);
                const from = urlParams.get('from') || undefined;
                const redirectPath = from || (userData.role === 'admin' ? ROUTES.ADMIN.DASHBOARD : ROUTES.HOME);
                console.log('üîÑ Redirecting after login:', redirectPath);
                await router.replace(redirectPath);
                return { success: true };
            } else {
                setUser(null);
                setIsAuthenticated(false);
                setLoading(false);
                throw new Error(response.message || 'ƒêƒÉng nh·∫≠p v·ªõi Google th·∫•t b·∫°i');
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi ƒëƒÉng nh·∫≠p v·ªõi Google:', error);
            setUser(null);
            setIsAuthenticated(false);
            setLoading(false);
            throw error;
        }
    };

    // Th√™m useEffect ƒë·ªÉ l·∫Øng nghe s·ª± ki·ªán logout
    useEffect(() => {
        const handleLogout = () => {
            setUser(null);
            setIsAuthenticated(false);
            setLoading(false);
            handleRedirect(router, null, window.location.pathname);
        };

        window.addEventListener('logout', handleLogout);
        return () => window.removeEventListener('logout', handleLogout);
    }, [router]);

    // Th√™m useEffect ƒë·ªÉ l·∫Øng nghe s·ª± ki·ªán userUpdated
    useEffect(() => {
        const handleUserUpdated = (event: CustomEvent) => {
            setUser(event.detail);
        };

        window.addEventListener('userUpdated', handleUserUpdated as EventListener);
        return () => window.removeEventListener('userUpdated', handleUserUpdated as EventListener);
    }, []);

    const value = {
        user,
        loading,
        isAuthenticated,
        login,
        register,
        logout,
        verifyOTP,
        resendOTP,
        forgotPassword,
        resetPassword,
        updateProfile,
        verifyAccount,
        requestUpdate,
        updateUser,
        loginWithGoogle,
        setUser,
        checkAuthStatus
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
}

export function useAuth() {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
}

