export async function fetchWithAuth(url: string, options: RequestInit = {}) {
    let accessToken = localStorage.getItem("accessToken");

    options.headers = {
      ...options.headers,
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    };

    let response = await fetch(url, options);

    if (response.status === 401) {
      console.warn("‚ö†Ô∏è Access Token h·∫øt h·∫°n, ƒëang refresh...");

      const newAccessToken = await refreshAccessToken();
      if (!newAccessToken) {
        console.error("üö® Refresh Token kh√¥ng h·ª£p l·ªá, ƒëƒÉng xu·∫•t...");
        logout(); // <--- G·ªçi logout n·∫øu refresh token kh√¥ng h·ª£p l·ªá
        return null;
      }

      // C·∫≠p nh·∫≠t token m·ªõi v√† th·ª≠ l·∫°i request
      accessToken = newAccessToken;
      options.headers = {
        ...options.headers,
        Authorization: `Bearer ${accessToken}`,
      };

      response = await fetch(url, options);
    }

    return response;
}

// üåÄ H√†m g·ªçi API ƒë·ªÉ refresh Access Token
async function refreshAccessToken(): Promise<string | null> {
    try {
      const response = await fetch("/api/auth/refresh", {
        method: "POST",
        credentials: "include", // G·ª≠i cookie refreshToken
      });

      if (!response.ok) {
        console.error("‚ùå L·ªói khi refresh token:", response.status);
        return null;
      }

      const data = await response.json();
      if (data.accessToken) {
        localStorage.setItem("accessToken", data.accessToken);
        return data.accessToken;
      }
      return null;
    } catch (error) {
      console.error("‚ùå L·ªói k·∫øt n·ªëi API refresh token:", error);
      return null;
    }
}

// üî¥ H√†m logout: X√≥a token & chuy·ªÉn h∆∞·ªõng trang
export function logout() {  // <--- Th√™m export ·ªü ƒë√¢y
    localStorage.removeItem("accessToken");
    document.cookie = "refreshToken=; Max-Age=0; path=/"; // X√≥a cookie refreshToken
    window.location.href = "/user/auth/login"; // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
}