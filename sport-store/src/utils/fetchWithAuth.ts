interface ApiResponse<T = unknown> {
  success: boolean;
  message?: string;
  data?: T;
  products?: T[];
  categories?: T[];
  product?: T;
}

export const fetchWithAuth = async <T = unknown>(endpoint: string, options: RequestInit = {}): Promise<ApiResponse<T>> => {
  try {
    // L·∫•y token t·ª´ localStorage
    const token = localStorage.getItem("accessToken");
    console.log("üîπ [fetchWithAuth] Initial token:", token);

    if (!token) {
      console.error("‚ùå [fetchWithAuth] Kh√¥ng t√¨m th·∫•y token");
      throw new Error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c");
    }

    // T·∫°o headers m·∫∑c ƒë·ªãnh
    const defaultHeaders = {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
    };

    // Merge headers m·∫∑c ƒë·ªãnh v·ªõi headers t√πy ch·ªçn
    const headers = {
      ...defaultHeaders,
      ...options.headers,
    };

    // G·ªçi API v·ªõi token
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || "http://localhost:4000/api"}${endpoint}`, {
      ...options,
      headers,
      credentials: "include", // Th√™m credentials ƒë·ªÉ g·ª≠i cookies
    });

    // Log response status v√† headers
    console.log("üîπ [fetchWithAuth] Response status:", response.status);
    console.log("üîπ [fetchWithAuth] Response headers:", Object.fromEntries(response.headers.entries()));

    // ƒê·ªçc response body
    const responseData = await response.json().catch(() => null);
    console.log("üîπ [fetchWithAuth] Response data:", responseData);

    // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói
    if (response.status === 401) {
      // Th·ª≠ refresh token
      try {
        const refreshResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL || "http://localhost:4000/api"}/auth/refresh`, {
          method: "POST",
          credentials: "include",
        });

        if (!refreshResponse.ok) {
          throw new Error("Kh√¥ng th·ªÉ refresh token");
        }

        const refreshData = await refreshResponse.json();
        if (refreshData.accessToken) {
          // L∆∞u access token m·ªõi
          localStorage.setItem("accessToken", refreshData.accessToken);
          
          // Th·ª≠ g·ªçi l·∫°i API v·ªõi token m·ªõi
          const retryResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL || "http://localhost:4000/api"}${endpoint}`, {
            ...options,
            headers: {
              ...headers,
              Authorization: `Bearer ${refreshData.accessToken}`,
            },
            credentials: "include",
          });
          
          return await retryResponse.json();
        }
      } catch (refreshError) {
        console.error("‚ùå [fetchWithAuth] L·ªói refresh token:", refreshError);
      }
      
      console.error("‚ùå [fetchWithAuth] Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá");
      localStorage.removeItem("accessToken");
      window.location.href = "/auth/login";
      throw new Error(responseData?.message || "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
    }

    if (response.status === 403) {
      console.error("‚ùå [fetchWithAuth] Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p");
      throw new Error(responseData?.message || "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y");
    }

    if (response.status === 404) {
      console.error("‚ùå [fetchWithAuth] Kh√¥ng t√¨m th·∫•y t√†i nguy√™n");
      throw new Error(responseData?.message || "Kh√¥ng t√¨m th·∫•y t√†i nguy√™n");
    }

    if (response.status === 400) {
      console.error("‚ùå [fetchWithAuth] D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:", responseData);
      throw new Error(responseData?.message || "D·ªØ li·ªáu g·ª≠i ƒëi kh√¥ng h·ª£p l·ªá");
    }

    if (!response.ok) {
      console.error("‚ùå [fetchWithAuth] L·ªói server:", response.status, responseData);
      throw new Error(responseData?.message || "ƒê√£ x·∫£y ra l·ªói");
    }

    // N·∫øu response kh√¥ng c√≥ success ho·∫∑c data, th√™m v√†o
    if (!responseData.success) {
      return {
        success: true,
        data: responseData,
        message: "Th√†nh c√¥ng"
      };
    }

    return responseData;
  } catch (error) {
    console.error("‚ùå [fetchWithAuth] L·ªói:", error);
    throw error;
  }
}; 