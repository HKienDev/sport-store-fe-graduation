import type { AppRouterInstance } from 'next/dist/shared/lib/app-router-context.shared-runtime';
import { AuthUser } from '@/types/auth';
import { debounce } from 'lodash';

// ƒê·ªãnh nghƒ©a enum UserRole
export enum UserRole {
    ADMIN = 'admin',
    USER = 'user'
}

// Th·ªùi gian ch·ªù chuy·ªÉn h∆∞·ªõng (ms)
const REDIRECT_DELAY = 300;

// Tr·∫°ng th√°i chuy·ªÉn h∆∞·ªõng
let isRedirecting = false;

// Debounced version c·ªßa handleRedirect
export const handleRedirect = debounce(async (
    router: AppRouterInstance,
    user: AuthUser | null,
    currentPath: string
): Promise<void> => {
    try {
        console.log('[handleRedirect] B·∫Øt ƒë·∫ßu chuy·ªÉn h∆∞·ªõng:', { user, currentPath });
        if (isRedirecting) {
            console.log('[handleRedirect] ‚ö†Ô∏è ƒêang trong qu√° tr√¨nh chuy·ªÉn h∆∞·ªõng, b·ªè qua');
            return;
        }
        if (!router) {
            console.warn('[handleRedirect] ‚ö†Ô∏è Router kh√¥ng kh·∫£ d·ª•ng, kh√¥ng th·ªÉ chuy·ªÉn h∆∞·ªõng');
            return;
        }
        isRedirecting = true;
        let redirectPath = '/';
        let reason = '';
        if (user) {
            console.log('[handleRedirect] üë§ User info:', user);
            if (user.role === UserRole.ADMIN) {
                redirectPath = '/admin/dashboard';
                reason = 'role=admin';
            } else {
                redirectPath = '/user';
                reason = 'role=user';
            }
            if (currentPath.startsWith('/auth/')) {
                if (redirectPath === currentPath) {
                    console.log('[handleRedirect] ‚ö†Ô∏è ƒê∆∞·ªùng d·∫´n chuy·ªÉn h∆∞·ªõng gi·ªëng v·ªõi ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i, b·ªè qua');
                    isRedirecting = false;
                    return;
                }
            }
        } else {
            if (currentPath.startsWith('/admin/') || currentPath.startsWith('/user/')) {
                redirectPath = '/auth/login';
                reason = 'no user, c·∫ßn x√°c th·ª±c';
            }
        }
        console.log('[handleRedirect] üîÑ Th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng:', { from: currentPath, to: redirectPath, hasUser: !!user, userRole: user?.role, reason });
        await router.push(redirectPath);
        await new Promise(resolve => setTimeout(resolve, REDIRECT_DELAY));
        isRedirecting = false;
    } catch (error) {
        console.error('[handleRedirect] ‚ùå L·ªói khi chuy·ªÉn h∆∞·ªõng:', error);
        isRedirecting = false;
        throw error;
    }
}, 500); 