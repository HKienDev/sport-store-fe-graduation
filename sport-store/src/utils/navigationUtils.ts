import type { AppRouterInstance } from 'next/dist/shared/lib/app-router-context.shared-runtime';
import { AuthUser } from '@/types/auth';
import { debounce } from 'lodash';

// ƒê·ªãnh nghƒ©a enum UserRole
export enum UserRole {
    ADMIN = 'admin',
    USER = 'user'
}

// Th·ªùi gian ch·ªù chuy·ªÉn h∆∞·ªõng (ms)
const REDIRECT_DELAY = 300;

// Tr·∫°ng th√°i chuy·ªÉn h∆∞·ªõng
let isRedirecting = false;

// Debounced version c·ªßa handleRedirect
export const handleRedirect = debounce(async (
    router: AppRouterInstance,
    user: AuthUser | null,
    currentPath: string
): Promise<void> => {
    try {
        // N·∫øu ƒëang chuy·ªÉn h∆∞·ªõng, kh√¥ng th·ª±c hi·ªán th√™m
        if (isRedirecting) {
            console.log('‚ö†Ô∏è ƒêang trong qu√° tr√¨nh chuy·ªÉn h∆∞·ªõng, b·ªè qua');
            return;
        }

        // N·∫øu kh√¥ng c√≥ router, kh√¥ng th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng
        if (!router) {
            console.warn('‚ö†Ô∏è Router kh√¥ng kh·∫£ d·ª•ng, kh√¥ng th·ªÉ chuy·ªÉn h∆∞·ªõng');
            return;
        }

        // ƒê√°nh d·∫•u ƒëang chuy·ªÉn h∆∞·ªõng
        isRedirecting = true;

        // X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n chuy·ªÉn h∆∞·ªõng
        let redirectPath = '/';

        // N·∫øu c√≥ user, x·ª≠ l√Ω chuy·ªÉn h∆∞·ªõng d·ª±a tr√™n role
        if (user) {
            console.log('üë§ X·ª≠ l√Ω chuy·ªÉn h∆∞·ªõng cho user:', {
                role: user.role,
                currentPath
            });

            // X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n chuy·ªÉn h∆∞·ªõng d·ª±a tr√™n role
            if (user.role === UserRole.ADMIN) {
                redirectPath = '/admin/dashboard';
            } else {
                redirectPath = '/user/';
            }

            // N·∫øu ƒëang ·ªü trang auth, th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng
            if (currentPath.startsWith('/auth/')) {
                // N·∫øu ƒë∆∞·ªùng d·∫´n chuy·ªÉn h∆∞·ªõng gi·ªëng v·ªõi ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i, kh√¥ng th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng
                if (redirectPath === currentPath) {
                    console.log('‚ö†Ô∏è ƒê∆∞·ªùng d·∫´n chuy·ªÉn h∆∞·ªõng gi·ªëng v·ªõi ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i, b·ªè qua');
                    isRedirecting = false;
                    return;
                }
            }
        } else {
            // N·∫øu kh√¥ng c√≥ user v√† ƒëang ·ªü trang c·∫ßn x√°c th·ª±c
            if (currentPath.startsWith('/admin/') || currentPath.startsWith('/user/')) {
                redirectPath = '/auth/login';
            }
        }

        // Log th√¥ng tin chuy·ªÉn h∆∞·ªõng
        console.log('üîÑ Th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng:', {
            from: currentPath,
            to: redirectPath,
            hasUser: !!user,
            userRole: user?.role
        });

        // Th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng v·ªõi router.push
        await router.push(redirectPath);

        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o chuy·ªÉn h∆∞·ªõng ho√†n t·∫•t
        await new Promise(resolve => setTimeout(resolve, REDIRECT_DELAY));

        // Reset tr·∫°ng th√°i chuy·ªÉn h∆∞·ªõng
        isRedirecting = false;
    } catch (error) {
        console.error('‚ùå L·ªói khi chuy·ªÉn h∆∞·ªõng:', error);
        isRedirecting = false;
        throw error;
    }
}, 500); 